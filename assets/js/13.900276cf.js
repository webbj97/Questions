(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{825:function(n,e,r){"use strict";r.r(e);var t=r(59),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[n._v("#")]),n._v(" 数组")]),n._v(" "),r("h2",{attrs:{id:"四、删除元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、删除元素"}},[n._v("#")]),n._v(" 四、删除元素")]),n._v(" "),r("p",[n._v("目前为止，我们已经学习了如何给数组的开始和结尾位置添加元素。下面来看一下怎样从数\n组中删除元素。")]),n._v(" "),r("h3",{attrs:{id:"_4-1-从数组末尾删除元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-从数组末尾删除元素"}},[n._v("#")]),n._v(" 4.1 从数组末尾删除元素")]),n._v(" "),r("p",[n._v("要删除数组里最靠后的元素，可以用 pop 方法。")]),n._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/warehouse/js/1.html#pop"}},[n._v("pop实现")])],1)]),n._v(" "),r("p",[n._v("pop和push就可以用来模拟栈的入栈和出栈")]),n._v(" "),r("h3",{attrs:{id:"_4-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2"}},[n._v("#")]),n._v(" 4.2")]),n._v(" "),r("p",[n._v("现在，数组输出的数是4 到 12，数组的长度是 17。\n3.4.2 从数组开头删除元素\n如果要移除数组里的第一个元素，可以用下面的代码。\nfor (let i = 0; i < numbers.length; i++) {\nnumbers[i] = numbers[i + 1];\n}\n下图呈现了这段代码的执行过程。\n我们把数组里所有的元素都左移了一位，但数组的长度依然是 17，这意味着数组中有额外\n50 第 3 章 数组\n的一个元素（值是 undefined）。在最后一次循环里，i+1 引用了数组里还未初始化的一个位置。\n在 Java、C/C+或 C#等一些语言里，这样写可能会抛出异常，因此不得不在 numbers.length- 1\n处停止循环。\n可以看到，我们只是把数组第一位的值用第二位覆盖了，并没有删除元素（因为数组的长度\n和之前还是一样的，并且多了一个未定义元素）。\n要从数组中移除这个值，还可以创建一个包含刚才所讨论逻辑的方法，叫作 removeFirst￾Position。但是，要真正从数组中移除这个元素，我们需要创建一个新的数组，将所有不是\nundefined 的值从原来的数组复制到新的数组中，并且将这个新的数组赋值给我们的数组。要\n完成这项工作，也可以像下面这样创建一个 reIndex 方法。\nArray.prototype.reIndex = function(myArray) {\nconst newArray = [];\nfor(let i = 0; i < myArray.length; i++ ) {\nif (myArray[i] !== undefined) {\n// console.log(myArray[i]);\nnewArray.push(myArray[i]);\n}\n}\nreturn newArray;\n}\n// 手动移除第一个元素并重新排序\nArray.prototype.removeFirstPosition = function() {\nfor (let i = 0; i < this.length; i++) {\nthis[i] = this[i + 1];\n}\nreturn this.reIndex(this);\n};\nnumbers = numbers.removeFirstPosition();\n上面的代码只应该用作示范，不应该在真实项目中使用。要从数组开头删除元素，\n我们应该始终使用 shift 方法，这将在下一节中展示。\n使用 shift 方法\n要删除数组的第一个元素，可以用 shift 方法实现。\nnumbers.shift();\n假如本来数组中的值是从4 到 12，长度为 17。执行了上述代码后，数组就只有3 到 12 了，\n长度也会减小到 16。\n通过 shift 和 unshift 方法，我们就能用数组模拟基本的队列数据结构，第 5\n章会讲到。\n3.6 二维和多维数组 51\n1\n2\n3\n4\n5\n5\n6\n7\n8\n9\n0\n1\n2\n3\n4\n3.5 在任意位置添加或删除元素\n目前为止，我们已经学习了如何添加元素到数组的开头或末尾，以及怎样删除数组开头和结\n尾位置上的元素。那么如何在数组中的任意位置上删除或添加元素呢？\n我们可以使用 splice 方法，简单地通过指定位置/索引，就可以删除相应位置上指定数量\n的元素。\nnumbers.splice(5,3);\n这行代码删除了从数组索引 5 开始的 3 个元素。这就意味着 numbers[5]、numbers[6]和\nnumbers[7]从数组中删除了。现在数组里的值变成了3、2、1、0、1、5、6、7、8、9、10、\n11 和 12（2、3、4 已经被移除）。\n对于 JavaScript 数组和对象，我们还可以用 delete 运算符删除数组中的元素，\n例如 delete numbers[0]。然而，数组位置 0 的值会变成 undefined，也就\n是说，以上操作等同于 numbers[0] = undefined。因此，我们应该始终使用\nsplice、pop 或 shift（马上就会学到）方法来删除数组元素。\n现在，我们想把数 2、3、4 插入数组里，放到之前删除元素的位置上，可以再次使用 splice\n方法。\nnumbers.splice(5, 0, 2, 3, 4);\nsplice 方法接收的第一个参数，表示想要删除或插入的元素的索引值。第二个参数是删除\n元素的个数（这个例子里，我们的目的不是删除元素，所以传入 0）。第三个参数往后，就是要\n添加到数组里的值（元素 2、3、4）。输出会发现值又变成了从3 到 12。\n最后，执行以下这行代码。\nnumbers.splice(5, 3, 2, 3, 4);\n输出的值是从3 到 12。原因在于，我们从索引 5 开始删除了 3 个元素，但也从索引 5 开始\n添加了元素 2、3、4。")]),n._v(" "),r("comment-comment")],1)}),[],!1,null,null,null);e.default=s.exports}}]);