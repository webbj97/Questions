(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{852:function(t,e,n){"use strict";n.r(e);var s=n(59),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"剑指-offer-26-树的子结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-26-树的子结构"}},[t._v("#")]),t._v(" 剑指 Offer 26. 树的子结构")]),t._v(" "),n("p",[t._v("输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)")]),t._v(" "),n("p",[t._v("B是A的子结构， 即 A中有出现和B相同的结构和节点值。")]),t._v(" "),n("p",[t._v("例如:\n给定的树 A:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v(" 3\n/ \\\n")])])]),n("p",[t._v("4   5\n/ "),n("br"),t._v("\n1   2\n给定的树 B：")]),t._v(" "),n("p",[t._v("4\n/\n1\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。")]),t._v(" "),n("p",[t._v("示例 1：")]),t._v(" "),n("p",[t._v("输入：A = [1,2,3], B = [3,1]\n输出：false\n示例 2：")]),t._v(" "),n("p",[t._v("输入：A = [3,4,5,1,2], B = [4,1]\n输出：true")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n")])])]),t._v(" "),n("comment-comment")],1)}),[],!1,null,null,null);e.default=a.exports}}]);