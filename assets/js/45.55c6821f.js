(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{857:function(t,e,s){"use strict";s.r(e);var a=s(59),p=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"剑指-offer-31-栈的压入、弹出序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-31-栈的压入、弹出序列"}},[t._v("#")]),t._v(" 剑指 Offer 31. 栈的压入、弹出序列")]),t._v(" "),s("p",[t._v("输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。")]),t._v(" "),s("p",[s("strong",[t._v("示例 1：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n\n解释：我们可以按以下顺序执行：\n\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n")])])]),s("p",[s("strong",[t._v("示例 2：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n\n解释：1 不能在 2 之前弹出。\n")])])]),t._v(" "),s("comment-comment")],1)}),[],!1,null,null,null);e.default=p.exports}}]);